type ProjectFactory @entity {
  # factory address
  id: ID!
  # project info
  projectCount: BigInt!

  projectIds: [String!]!

  # projectIds: [String!]! # all project contracts address 
  
  # projectIds: [Project!]! @derivedFrom(field: "projectId") # if above syntax doesnt work
}

type Project @entity {
  #Project Address
  id: ID!
  totalRevenue: BigDecimal!
  name: String! # string
  projectId: String! # string
  members: [UserMapping!]! @derivedFrom(field: "project")
  distributors: [DistributorMapping!]! @derivedFrom(field: "project")
  totalPaid: BigDecimal!
  outStandingDues: BigDecimal!
  
}

type User @entity {
  id: ID!
  name: String!
  organization: String!
  quotas: [UserMapping!]! @derivedFrom(field: "user")
}

type UserMapping @entity {
  id: ID! # Set to `${user.id}-${project.id}`
  user: User!
  project: Project!
  quota: BigInt! # this should be BigDecimal
  outstandingShare: BigDecimal!
  paid: BigDecimal!
}

type Distributor @entity {
  id: ID!
  name: String!
  projects: [DistributorMapping!]! @derivedFrom(field: "distributor")
}

type DistributorMapping @entity {
  id: ID! # Set to `${distributor.id}-${project.id}`
  distributor: Distributor!
  project: Project!
  revenueCollectedForProject: BigDecimal!
}

# type ProjectRevenueAccounting @entity {
#   id: ID!
#   project: Project!
#   TotalRevenue: BigInt!
#   TotalPaid: BigInt!
#   OutStandingDues: BigInt!
# }